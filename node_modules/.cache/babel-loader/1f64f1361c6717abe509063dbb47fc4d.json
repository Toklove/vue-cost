{"remainingRequest":"/www/wwwroot/vue/node_modules/babel-loader/lib/index.js!/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/www/wwwroot/vue/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/www/wwwroot/vue/src/components/PopAdd.vue?vue&type=script&lang=js","dependencies":[{"path":"/www/wwwroot/vue/src/components/PopAdd.vue","mtime":1627217647275},{"path":"/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js","mtime":1627220017878},{"path":"/www/wwwroot/vue/node_modules/babel-loader/lib/index.js","mtime":1627220017809},{"path":"/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js","mtime":1627220017878},{"path":"/www/wwwroot/vue/node_modules/vue-loader-v16/dist/index.js","mtime":1627220029206}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}