{"remainingRequest":"/www/wwwroot/vue/node_modules/babel-loader/lib/index.js!/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/www/wwwroot/vue/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/www/wwwroot/vue/src/components/VueImageVerify.vue?vue&type=script&lang=js","dependencies":[{"path":"/www/wwwroot/vue/src/components/VueImageVerify.vue","mtime":1627217647227},{"path":"/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js","mtime":1627220017878},{"path":"/www/wwwroot/vue/node_modules/babel-loader/lib/index.js","mtime":1627220017809},{"path":"/www/wwwroot/vue/node_modules/cache-loader/dist/cjs.js","mtime":1627220017878},{"path":"/www/wwwroot/vue/node_modules/vue-loader-v16/dist/index.js","mtime":1627220029206}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi93d3cvd3d3cm9vdC92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgeyByZWFjdGl2ZSwgb25Nb3VudGVkLCByZWYsIHRvUmVmcyB9IGZyb20gJ3Z1ZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7CiAgICB2YXIgdmVyaWZ5ID0gcmVmKG51bGwpOwogICAgdmFyIHN0YXRlID0gcmVhY3RpdmUoewogICAgICBwb29sOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoxMjM0NTY3ODkwJywKICAgICAgLy8g5a2X56ym5LiyCiAgICAgIHdpZHRoOiAxMjAsCiAgICAgIGhlaWdodDogNDAsCiAgICAgIGltZ0NvZGU6ICcnCiAgICB9KTsKICAgIG9uTW91bnRlZChmdW5jdGlvbiAoKSB7CiAgICAgIC8vIOWIneWni+WMlue7mOWItuWbvueJh+mqjOivgeeggQogICAgICBzdGF0ZS5pbWdDb2RlID0gZHJhdygpOwogICAgfSk7IC8vIOeCueWHu+WbvueJh+mHjeaWsOe7mOWItgoKICAgIHZhciBoYW5kbGVEcmF3ID0gZnVuY3Rpb24gaGFuZGxlRHJhdygpIHsKICAgICAgc3RhdGUuaW1nQ29kZSA9IGRyYXcoKTsKICAgIH07IC8vIOmaj+acuuaVsAoKCiAgICB2YXIgcmFuZG9tTnVtID0gZnVuY3Rpb24gcmFuZG9tTnVtKG1pbiwgbWF4KSB7CiAgICAgIHJldHVybiBwYXJzZUludChNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pOwogICAgfTsgLy8g6ZqP5py66aKc6ImyCgoKICAgIHZhciByYW5kb21Db2xvciA9IGZ1bmN0aW9uIHJhbmRvbUNvbG9yKG1pbiwgbWF4KSB7CiAgICAgIHZhciByID0gcmFuZG9tTnVtKG1pbiwgbWF4KTsKICAgICAgdmFyIGcgPSByYW5kb21OdW0obWluLCBtYXgpOwogICAgICB2YXIgYiA9IHJhbmRvbU51bShtaW4sIG1heCk7CiAgICAgIHJldHVybiAicmdiKCIuY29uY2F0KHIsICIsIikuY29uY2F0KGcsICIsIikuY29uY2F0KGIsICIpIik7CiAgICB9OyAvLyDnu5jliLblm77niYcKCgogICAgdmFyIGRyYXcgPSBmdW5jdGlvbiBkcmF3KCkgewogICAgICAvLyAzLuWhq+WFheiDjOaZr+minOiJsu+8jOiDjOaZr+minOiJsuimgea1heS4gOeCuQogICAgICB2YXIgY3R4ID0gdmVyaWZ5LnZhbHVlLmdldENvbnRleHQoJzJkJyk7IC8vIOWhq+WFheminOiJsgoKICAgICAgY3R4LmZpbGxTdHlsZSA9IHJhbmRvbUNvbG9yKDE4MCwgMjMwKTsgLy8g5aGr5YWF55qE5L2N572uCgogICAgICBjdHguZmlsbFJlY3QoMCwgMCwgc3RhdGUud2lkdGgsIHN0YXRlLmhlaWdodCk7IC8vIOWumuS5iXBhcmFtVGV4dAoKICAgICAgdmFyIGltZ0NvZGUgPSAnJzsgLy8gNC7pmo/mnLrkuqfnlJ/lrZfnrKbkuLLvvIzlubbkuJTpmo/mnLrml4vovawKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgLy8g6ZqP5py655qE5Zub5Liq5a2XCiAgICAgICAgdmFyIHRleHQgPSBzdGF0ZS5wb29sW3JhbmRvbU51bSgwLCBzdGF0ZS5wb29sLmxlbmd0aCldOwogICAgICAgIGltZ0NvZGUgKz0gdGV4dDsgLy8g6ZqP5py655qE5a2X5L2T5aSn5bCPCgogICAgICAgIHZhciBmb250U2l6ZSA9IHJhbmRvbU51bSgxOCwgNDApOyAvLyDlrZfkvZPpmo/mnLrnmoTml4vovazop5LluqYKCiAgICAgICAgdmFyIGRlZyA9IHJhbmRvbU51bSgtMzAsIDMwKTsKICAgICAgICAvKgogICAgICAgICAqIOe7mOWItuaWh+Wtl+W5tuiuqeWbm+S4quaWh+Wtl+WcqOS4jeWQjOeahOS9jee9ruaYvuekuueahOaAnei3ryA6CiAgICAgICAgICogMeOAgeWumuS5ieWtl+S9kwogICAgICAgICAqIDLjgIHlrprkuYnlr7npvZDmlrnlvI8KICAgICAgICAgKiAz44CB5aGr5YWF5LiN5ZCM55qE6aKc6ImyCiAgICAgICAgICogNOOAgeS/neWtmOW9k+WJjeeahOeKtuaAge+8iOS7pemYsuatouS7peS4iueahOeKtuaAgeWPl+W9seWTje+8iQogICAgICAgICAqIDXjgIHlubPnp7sgdHJhbnNsYXRlKCkKICAgICAgICAgKiA244CB5peL6L2sIHJvdGF0ZSgpCiAgICAgICAgICogN+OAgeWhq+WFheaWh+WtlwogICAgICAgICAqIDjjgIFyZXN0b3JlIOWHuuagiAogICAgICAgICAqICovCgogICAgICAgIGN0eC5mb250ID0gZm9udFNpemUgKyAncHggU2ltaGVpJzsKICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7CiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHJhbmRvbUNvbG9yKDgwLCAxNTApOwogICAgICAgIC8qCiAgICAgICAgICogc2F2ZSgpIOaWueazleaKiuW9k+WJjeeKtuaAgeeahOS4gOS7veaLt+i0neWOi+WFpeWIsOS4gOS4quS/neWtmOWbvuWDj+eKtuaAgeeahOagiOS4reOAggogICAgICAgICAqIOi/meWwseWFgeiuuOaCqOS4tOaXtuWcsOaUueWPmOWbvuWDj+eKtuaAge+8jAogICAgICAgICAqIOeEtuWQju+8jOmAmui/h+iwg+eUqCByZXN0b3JlKCkg5p2l5oGi5aSN5Lul5YmN55qE5YC844CCCiAgICAgICAgICogc2F2ZeaYr+WFpeagiO+8jHJlc3RvcmUg5piv5Ye65qCI44CCCiAgICAgICAgICog55So5p2l5L+d5a2YQ2FudmFz55qE54q25oCB44CCc2F2ZSDkuYvlkI7vvIzlj6/ku6XosIPnlKggQ2FudmFzIOeahOW5s+enu+OAgeaUvue8qeOAgeaXi+i9rOOAgemUmeWIh+OAgeijgeWJquetieaTjeS9nOOAgiByZXN0b3Jl77ya55So5p2l5oGi5aSNIENhbnZhcyDkuYvliY3kv53lrZjnmoTnirbmgIHjgILpmLLmraIgc2F2ZSDlkI7lr7kgQ2FudmFzIOaJp+ihjOeahOaTjeS9nOWvueWQjue7reeahOe7mOWItuacieW9seWTjeOAggogICAgICAgICAqCiAgICAgICAgICogKi8KCiAgICAgICAgY3R4LnNhdmUoKTsKICAgICAgICBjdHgudHJhbnNsYXRlKDMwICogaSArIDE1LCAxNSk7CiAgICAgICAgY3R4LnJvdGF0ZShkZWcgKiBNYXRoLlBJIC8gMTgwKTsgLy8gZmlsbFRleHQoKSDmlrnms5XlnKjnlLvluIPkuIrnu5jliLbloavoibLnmoTmlofmnKzjgILmlofmnKznmoTpu5jorqTpopzoibLmmK/pu5HoibLjgIIKICAgICAgICAvLyDor7fkvb/nlKggZm9udCDlsZ7mgKfmnaXlrprkuYnlrZfkvZPlkozlrZflj7fvvIzlubbkvb/nlKggZmlsbFN0eWxlIOWxnuaAp+S7peWPpuS4gOenjeminOiJsi/muJDlj5jmnaXmuLLmn5PmlofmnKzjgIIKICAgICAgICAvLyBjb250ZXh0LmZpbGxUZXh0KHRleHQseCx5LG1heFdpZHRoKTsKCiAgICAgICAgY3R4LmZpbGxUZXh0KHRleHQsIC0xNSArIDUsIC0xNSk7CiAgICAgICAgY3R4LnJlc3RvcmUoKTsKICAgICAgfSAvLyA1Lumaj+acuuS6p+eUnzXmnaHlubLmibDnur8s5bmy5omw57q/55qE6aKc6Imy6KaB5rWF5LiA54K5CgoKICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IDU7IF9pKyspIHsKICAgICAgICBjdHguYmVnaW5QYXRoKCk7CiAgICAgICAgY3R4Lm1vdmVUbyhyYW5kb21OdW0oMCwgc3RhdGUud2lkdGgpLCByYW5kb21OdW0oMCwgc3RhdGUuaGVpZ2h0KSk7CiAgICAgICAgY3R4LmxpbmVUbyhyYW5kb21OdW0oMCwgc3RhdGUud2lkdGgpLCByYW5kb21OdW0oMCwgc3RhdGUuaGVpZ2h0KSk7CiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gcmFuZG9tQ29sb3IoMTgwLCAyMzApOwogICAgICAgIGN0eC5jbG9zZVBhdGgoKTsKICAgICAgICBjdHguc3Ryb2tlKCk7CiAgICAgIH0gLy8gNi7pmo/mnLrkuqfnlJ80MOS4quW5suaJsOeahOWwj+eCuQoKCiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IDQwOyBfaTIrKykgewogICAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgICBjdHguYXJjKHJhbmRvbU51bSgwLCBzdGF0ZS53aWR0aCksIHJhbmRvbU51bSgwLCBzdGF0ZS5oZWlnaHQpLCAxLCAwLCAyICogTWF0aC5QSSk7CiAgICAgICAgY3R4LmNsb3NlUGF0aCgpOwogICAgICAgIGN0eC5maWxsU3R5bGUgPSByYW5kb21Db2xvcigxNTAsIDIwMCk7CiAgICAgICAgY3R4LmZpbGwoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGltZ0NvZGU7CiAgICB9OwoKICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRvUmVmcyhzdGF0ZSkpLCB7fSwgewogICAgICB2ZXJpZnk6IHZlcmlmeSwKICAgICAgaGFuZGxlRHJhdzogaGFuZGxlRHJhdwogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["/www/wwwroot/vue/src/components/VueImageVerify.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"img-verify\">\n    <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\n  </div>\n</template>\n<script type=\"text/ecmascript-6\">\nimport { reactive, onMounted, ref, toRefs } from 'vue'\nexport default {\n  setup() {\n    const verify = ref(null)\n    const state = reactive({\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', // 字符串\n      width: 120,\n      height: 40,\n      imgCode: ''\n    })\n    onMounted(() => {\n      // 初始化绘制图片验证码\n      state.imgCode = draw()\n    })\n    \n    // 点击图片重新绘制\n    const handleDraw = () => {\n      state.imgCode = draw()\n    }\n\n    // 随机数\n    const randomNum = (min, max) => {\n      return parseInt(Math.random() * (max - min) + min)\n    }\n    // 随机颜色\n    const randomColor = (min, max) => {\n      const r = randomNum(min, max)\n      const g = randomNum(min, max)\n      const b = randomNum(min, max)\n      return `rgb(${r},${g},${b})`\n    }\n\n    // 绘制图片\n    const draw = () => {\n      // 3.填充背景颜色，背景颜色要浅一点\n      const ctx = verify.value.getContext('2d')\n      // 填充颜色\n      ctx.fillStyle = randomColor(180, 230)\n      // 填充的位置\n      ctx.fillRect(0, 0, state.width, state.height)\n      // 定义paramText\n      let imgCode = ''\n      // 4.随机产生字符串，并且随机旋转\n      for (let i = 0; i < 4; i++) {\n        // 随机的四个字\n        const text = state.pool[randomNum(0, state.pool.length)]\n        imgCode += text\n        // 随机的字体大小\n        const fontSize = randomNum(18, 40)\n        // 字体随机的旋转角度\n        const deg = randomNum(-30, 30)\n        /*\n         * 绘制文字并让四个文字在不同的位置显示的思路 :\n         * 1、定义字体\n         * 2、定义对齐方式\n         * 3、填充不同的颜色\n         * 4、保存当前的状态（以防止以上的状态受影响）\n         * 5、平移 translate()\n         * 6、旋转 rotate()\n         * 7、填充文字\n         * 8、restore 出栈\n         * */\n        ctx.font = fontSize + 'px Simhei'\n        ctx.textBaseline = 'top'\n        ctx.fillStyle = randomColor(80, 150)\n        /*\n         * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\n         * 这就允许您临时地改变图像状态，\n         * 然后，通过调用 restore() 来恢复以前的值。\n         * save是入栈，restore 是出栈。\n         * 用来保存Canvas的状态。save 之后，可以调用 Canvas 的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复 Canvas 之前保存的状态。防止 save 后对 Canvas 执行的操作对后续的绘制有影响。\n         *\n         * */\n        ctx.save()\n        ctx.translate(30 * i + 15, 15)\n        ctx.rotate((deg * Math.PI) / 180)\n        // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\n        // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\n        // context.fillText(text,x,y,maxWidth);\n        ctx.fillText(text, -15 + 5, -15)\n        ctx.restore()\n      }\n      // 5.随机产生5条干扰线,干扰线的颜色要浅一点\n      for (let i = 0; i < 5; i++) {\n        ctx.beginPath()\n        ctx.moveTo(randomNum(0, state.width), randomNum(0, state.height))\n        ctx.lineTo(randomNum(0, state.width), randomNum(0, state.height))\n        ctx.strokeStyle = randomColor(180, 230)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      // 6.随机产生40个干扰的小点\n      for (let i = 0; i < 40; i++) {\n        ctx.beginPath()\n        ctx.arc(randomNum(0, state.width), randomNum(0, state.height), 1, 0, 2 * Math.PI)\n        ctx.closePath()\n        ctx.fillStyle = randomColor(150, 200)\n        ctx.fill()\n      }\n      return imgCode\n    }\n\n    return {\n      ...toRefs(state),\n      verify,\n      handleDraw\n    }\n  }\n}\n</script>\n<style type=\"text/css\">\n.img-verify canvas {\n  cursor: pointer;\n}\n</style>"],"sourceRoot":""}]}